#! /bin/bash
shopt -s globstar
mkdir ../run/output/item -p
mkdir ../run/output/biome -p
mkdir ../run/output/enchantment -p
mkdir ../run/output/game_tag -p
jq 'to_entries | map({key: .key | .[10:], rarity: .value.components."minecraft:rarity" | ascii_upcase} | select(.rarity != "COMMON") | {rarity: .rarity, key: "\t['\''\(.key)'\''] = '\''\(.rarity)'\'',"}) | group_by(.rarity) | map({rarity: .[0] | .rarity, vals: map(.key) | sort}) | map("\n\t-- \(.rarity)\n\(.vals | join("\n"))") | join("\n") | "\t['\''__fallback'\''] = '\''COMMON'\'',\n\(.)"' ../run/data-gen/reports/items.json -r > ../run/output/item/rarity.txt
jq 'to_entries | map({key: .key | .[10:], size: .value.components."minecraft:max_stack_size"} | select(.size != 64) | {size: .size, key: "\t['\''\(.key)'\''] = \(.size),"}) | group_by(.size) | map({size: .[0] | .size, vals: map(.key) | sort}) | map("\n\t-- \(.size)\n\(.vals | join("\n"))") | join("\n") | "\t['\''__fallback'\''] = 64,\n\(.)"' ../run/data-gen/reports/items.json -r > ../run/output/item/max_stack_size.txt
jq 'to_entries | map({key: .key | .[10:], damage: .value.components."minecraft:max_damage"} | select(.damage != null) | {damage: .damage, key: "\t['\''\(.key)'\''] = \(.damage),"}) | group_by(.damage) | map({damage: .[0] | .damage, vals: map(.key) | sort}) | map("\n\t-- \(.damage)\n\(.vals | join("\n"))") | join("\n") | "\t['\''__fallback'\''] = 0,\n\(.)"' ../run/data-gen/reports/items.json -r > ../run/output/item/max_damage.txt
jq 'to_entries | map({key: .key | .[10:], am: .value.components."minecraft:attribute_modifiers"} | select(.am | length != 0) | {key: .key, am: .am | group_by(.slot) | map({slot: .[0] | .slot, vals: map("\t\t\t\t['\''attribute'\''] = '\''\(.type | .[10:])'\'',\n\t\t\t\t['\''amount'\''] = \(.amount),\n\t\t\t\t['\''operation'\''] = '\''\(.operation)'\'',\n" | "\t\t\t{\n\(.)\t\t\t},") | join("\n")} | "\t\t['\''\(.slot)'\''] = {\n\(.vals)\n\t\t},") | join("\n")}) | sort_by(.key) | .[] | "\t['\''\(.key)'\''] = {\n\(.am)\n\t},"' ../run/data-gen/reports/items.json -r > ../run/output/item/attribute_modifiers.txt
jq -n '[inputs | .temperature | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | group_by(.value) | map({t: .[0] | .value, vals: map("\t['\''\(.key)'\''] = \(.value),") | join("\n")} | "\n\t-- \(.t)\n\(.vals)") | join("\n")' ../run/data-gen/data/minecraft/worldgen/biome/*.json -r > ../run/output/biome/temperature.txt
jq -n '[inputs | .has_precipitation | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | group_by(.value) | sort_by(.[0] | .value | not) | map({t: .[0] | .value, vals: map("\t['\''\(.key)'\''] = \(.value),") | join("\n")} | "\n\t-- \(.t)\n\(.vals)") | join("\n")' ../run/data-gen/data/minecraft/worldgen/biome/*.json -r > ../run/output/biome/has_precipitation.txt
jq -n '[inputs | .effects.foliage_color | select(. != null) | ascii_upcase | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | map("\t['\''\(.key)'\''] = '\''\(.value)'\'',") | join("\n")' ../run/data-gen/data/minecraft/worldgen/biome/*.json -r > ../run/output/biome/foliage_color.txt
jq -n '[inputs | .effects.grass_color | select(. != null) | ascii_upcase | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | map("\t['\''\(.key)'\''] = '\''\(.value)'\'',") | join("\n")' ../run/data-gen/data/minecraft/worldgen/biome/*.json -r > ../run/output/biome/grass_color.txt
jq -n '[inputs | .effects.water_color | select(. != null) | ascii_upcase | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | map("\t['\''\(.key)'\''] = '\''\(.value)'\'',") | join("\n")' ../run/data-gen/data/minecraft/worldgen/biome/*.json -r > ../run/output/biome/water_color.txt
jq -n '[inputs | .attributes."minecraft:visual/fog_color" | select(. != null) | ascii_upcase | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | map("\t['\''\(.key)'\''] = '\''\(.value)'\'',") | join("\n")' ../run/data-gen/data/minecraft/worldgen/biome/*.json -r > ../run/output/biome/fog_color.txt
jq -n '[inputs | .attributes."minecraft:visual/sky_color" | select(. != null) | ascii_upcase | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | map("\t['\''\(.key)'\''] = '\''\(.value)'\'',") | join("\n")' ../run/data-gen/data/minecraft/worldgen/biome/*.json -r > ../run/output/biome/sky_color.txt
jq -n '[inputs | .attributes."minecraft:visual/water_fog_color" | select(. != null) | ascii_upcase | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | map("\t['\''\(.key)'\''] = '\''\(.value)'\'',") | join("\n")' ../run/data-gen/data/minecraft/worldgen/biome/*.json -r > ../run/output/biome/water_fog_color.txt
jq -n '[inputs | .spawners | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | map({k: .key, v: .value | to_entries | map(select(.value | length != 0) | {k: .key | ascii_upcase, v: .value | sort_by(.type) | map("\t\t\t{\n\t\t\t\t['\''entity_id'\''] = '\''\(.type | .[10:])'\'',\n\t\t\t\t['\''weight'\''] = \(.weight),\n\t\t\t\t['\''min_size'\''] = \(.minCount),\n\t\t\t\t['\''max_size'\''] = \(.maxCount),\n\t\t\t},") | join("\n")} | "\t\t['\''\(.k)'\''] = {\n\(.v)\n\t\t},") | join("\n")} | "\t['\''\(.k)'\''] = {\n\(.v)\n\t},") | join("\n")' ../run/data-gen/data/minecraft/worldgen/biome/*.json -r > ../run/output/biome/spawn_data.txt
jq -n '[inputs | .max_level | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | group_by(.value) | map({t: .[0] | .value, vals: map("\t['\''\(.key)'\''] = \(.value),") | join("\n")} | "\n\t-- \(.t)\n\(.vals)") | join("\n")' ../run/data-gen/data/minecraft/enchantment/*.json -r > ../run/output/enchantment/max_level.txt
jq -n '[inputs | .weight | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | group_by(.value) | map({t: .[0] | .value, vals: map("\t['\''\(.key)'\''] = \(.value),") | join("\n")} | "\n\t-- \(.t)\n\(.vals)") | join("\n")' ../run/data-gen/data/minecraft/enchantment/*.json -r > ../run/output/enchantment/weight.txt
ITEM_TAGS=$(jq '.item' ../run/output/tags.json)
jq -n --argjson it "$ITEM_TAGS" '[inputs | .supported_items | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | map("\t['\''\(.key)'\''] = {\(.value | .[11:] | $it[.] | map("'\''\(.)'\''") | join(", "))},") | join("\n")' ../run/data-gen/data/minecraft/enchantment/*.json -r > ../run/output/enchantment/support_items.txt
jq -n --argjson it "$ITEM_TAGS" '[inputs | .primary_items // .supported_items | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | map("\t['\''\(.key)'\''] = {\(.value | .[11:] | $it[.] | map("'\''\(.)'\''") | join(", "))},") | join("\n")' ../run/data-gen/data/minecraft/enchantment/*.json -r > ../run/output/enchantment/primary_items.txt
ENCH_TAGS=$(jq '.enchantment' ../run/output/tags.json)
jq -n --argjson et "$ENCH_TAGS" '[inputs | .exclusive_set | {(input_filename | gsub(".*/|\\.json$"; "")): .}] | add | to_entries | (map({key: .key, value: (.value // "") | .[11:] | $et[.]} | select(.value != null)) | from_entries) as $c | map(.key as $k | {key: $k, value: $c[$k], add: $c | to_entries | map(select(.value | any(. == $k))) | map(.key)}) | .[] | .add += .value | .add -= [.key] | "\t['\''\(.key)'\''] = {\(.add | unique | sort | map("'\''\(.)'\''") | join(", "))},"' ../run/data-gen/data/minecraft/enchantment/*.json -r > ../run/output/enchantment/incompatible.txt
REGS=$(jq '.registries | keys | map(.[10:]) | join("|")' -r ../run/data-gen/reports/datapack.json)
jq -n --arg regs "$REGS" '[inputs | .values | (input_filename | gsub("^.*minecraft/tags/|\\.json$"; "") | capture("(?<k>\($regs))/(?<v>.+)")) as $i | {val: ., reg: $i | .k, tag: $i | .v}] | group_by(.reg) | map({reg: .[0] | .reg, vals: map({tag: .tag, val: .val})}) | .[] | {reg: .reg, vals: .vals | map({tag: .tag, val: .val | map(gsub("minecraft:"; "") | "\t\t\t\t'\''\(.)'\'',") | join("\n")} | "\t\t\t['\''\(.tag)'\''] = {\n\(.val)\n\t\t\t},") | join("\n")} | "\t\t['\''\(.reg)'\''] = {\n\(.vals)\n\t\t},"' ../run/data-gen/data/minecraft/tags/**/*.json -r > ../run/output/game_tag/tag_ori.txt
jq 'to_entries | map({reg: .key, vals: .value | to_entries}) | sort_by(.reg) | .[] | select(.vals | length > 0) | {reg: .reg, vals: .vals | map({tag: .key, val: .value | map("\t\t\t\t'\''\(.)'\'',") | join("\n")} | "\t\t\t['\''\(.tag)'\''] = {\n\(.val)\n\t\t\t},") | join("\n")} | "\t\t['\''\(.reg)'\''] = {\n\(.vals)\n\t\t},"' ../run/output/tags.json -r > ../run/output/game_tag/tag.txt
jq 'to_entries | map({reg: .key, vals: .value | to_entries}) | sort_by(.reg) | .[] | select(.vals | length > 0) | .vals as $vals | .reg as $reg | .vals | map(.value) | flatten | unique | sort | map(. as $k | {k: ., v: $vals | map(select(.value | any(. == $k)) | "\t\t\t\t'\''\(.key)'\'',") | join("\n")} | "\t\t\t['\''\(.k)'\''] = {\n\(.v)\n\t\t\t},") | join("\n") | "\t\t['\''\($reg)'\''] = {\n\(.)\n\t\t},"' ../run/output/tags.json -r > ../run/output/game_tag/ID.txt
printf "\t['tag_ori'] = {\n%s\n\t},\n\t['tag'] = {\n%s\n\t},\n\t['ID'] = {\n%s\n\t}," "$(cat ../run/output/game_tag/tag_ori.txt)" "$(cat ../run/output/game_tag/tag.txt)" "$(cat ../run/output/game_tag/ID.txt)" > ../run/output/game_tag/game_tag.txt